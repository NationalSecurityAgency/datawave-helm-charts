####################################
# Core Helm Template Configuration #
####################################

apiVersion: apps/v1
kind: Deployment

######################################
# Basic Metadata for this Deployment #
######################################

metadata:
  name: "{{ .Values.datawaveDeployment.meta.name }}"
  annotations:
    ignore-check.kube-linter.io/run-as-non-root: "This deployment needs to run as root until datawave image is fixed"
  labels:
    application: "{{ .Values.datawaveDeployment.meta.name }}"

#####################################
# Complete Deployment Specification #
#####################################

spec:

  ######################################
  # Replication / Update Configuration #
  ######################################

  replicas: {{ .Values.datawaveDeployment.replication.replicaCount }}
  revisionHistoryLimit: {{ .Values.datawaveDeployment.replication.revisionHistoryLimit }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: {{ .Values.datawaveDeployment.replication.maxSurge }}
      maxUnavailable: {{ .Values.datawaveDeployment.replication.maxUnavailable }}

  ###################################
  # Resource Selector Configuration #
  ###################################

  selector:
    matchLabels:
      application: "{{ .Values.datawaveDeployment.meta.name }}"
  
  #####################################
  # Deployment Template Configuration #
  #####################################

  template:

    ##################################################
    # Basic Metadata for this Deployment's Resources #
    ##################################################

    metadata:
      labels:
        application: "{{ .Values.datawaveDeployment.meta.name }}"

    #######################################
    # Deployment Resources Specifications #
    #######################################

    spec:
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.global.pullSecrets }}
      imagePullSecrets:
      {{- range . }}
      - name: {{ . }}
      {{- end }}
      {{- end }}
      restartPolicy: "{{ .Values.datawaveDeployment.restartPolicy }}"

      ##############################################
      # Containers Associated with this Deployment #
      ##############################################
      initContainers:
        - name: init-authorization
          securityContext:
            runAsUser: 1000
            runAsNonRoot: true
          image: busybox:1.28
          command: ['sh', '-c', "until nslookup authorization; do echo waiting for auth service; sleep 2; done"]
     #TODO: Add this in after making it work. Will require updates in datawave
      # securityContext:
        # runAsUser: 1000
        # runAsNonRoot: true
      containers:

        - name: "{{ .Values.datawaveDeployment.meta.name }}"
          image: "{{ .Values.global.dockerRegistry.url }}/{{ .Values.datawaveDeployment.image.name }}:{{ .Values.datawaveDeployment.image.tag }}"
          imagePullPolicy: "{{ .Values.datawaveDeployment.image.pullPolicy }}"
          livenessProbe:
            httpGet:
              path: "{{ .Values.datawaveDeployment.livenessProbe.uri }}"
              port: {{ .Values.datawaveDeployment.livenessProbe.port }}
              scheme: "{{ .Values.datawaveDeployment.livenessProbe.scheme }}"
            initialDelaySeconds: {{ .Values.datawaveDeployment.livenessProbe.delaySeconds }}
            periodSeconds: {{ .Values.datawaveDeployment.livenessProbe.periodSeconds }}
          readinessProbe:
            httpGet:
              path: "{{ .Values.datawaveDeployment.readinessProbe.uri }}"
              port: {{ .Values.datawaveDeployment.readinessProbe.port }}
              scheme: "{{ .Values.datawaveDeployment.readinessProbe.scheme }}"
            initialDelaySeconds: {{ .Values.datawaveDeployment.readinessProbe.delaySeconds }}
            periodSeconds: {{ .Values.datawaveDeployment.readinessProbe.periodSeconds }}
          ports:
            - containerPort: 8080
            - containerPort: 8443
          resources: {}
          env:
            - name: ACCUMULO_PASSWORD
              value: {{ .Values.global.accumulo.password }} 
            - name: HADOOP_CLASSPATH
              value: {{ .Values.hadoop.classpath }}
            - name: KEYSTORE
              value: {{ .Values.global.volumes.certificates.destination }}/keystore.p12
            - name: KEYSTORE_TYPE
              value: PKCS12
            - name: KEYSTORE_PASSWORD
              value: {{ .Values.global.certificates.keystore.password }} 
            - name: TRUSTSTORE
              value: {{ .Values.global.volumes.certificates.destination }}/truststore.jks
            - name: TRUSTSTORE_TYPE
              value: JKS
            - name: TRUSTSTORE_PASSWORD
              value: {{ .Values.global.certificates.truststorePassword }} 
          volumeMounts:
            - name: "{{ .Values.global.volumes.certificates.name }}"
              mountPath: "{{ .Values.global.volumes.certificates.destination }}"
              readOnly: true
            - name: hadoop-config
              mountPath: /etc/hadoop/conf
            - name: "{{ .Chart.Name }}-web-runtime-config"
              mountPath: /opt/jboss/wildfly/runtime-config.cli
              subPath: runtime-config.cli

      ###########################################
      # Volumes Associated with this Deployment #
      ###########################################

      volumes:
        - name: "{{ .Values.global.volumes.certificates.name }}"
          secret:
            secretName: "{{ .Values.global.certSecretName }}"
            optional: false
        - name: hadoop-config
          configMap:
            name: "{{ .Values.global.hadoop.configMapName }}"
        - name: "{{ .Chart.Name }}-web-runtime-config"
          configMap:
            name: "{{ .Chart.Name }}-web-runtime-config"

